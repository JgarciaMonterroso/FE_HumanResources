@page "/CreateUser"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="nav-fixed">
    <div id="layoutSidenav">
        <div id="layoutSidenav_content">
            <main>
                <div>
                    <br />
                    <RadzenTemplateForm Data="@userEntity" Submit="@((UserEntity args) => { CreateNewUser(args); })">
                        <RadzenRow Gap="18rem" Class="rz-p-0 rz-p-lg-4">
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenStack>
                                    <RadzenFieldset Text="Purchase Info">
                                        <RadzenStack>
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="12" SizeMD="4">
                                                    <RadzenLabel Text="Name" Component="UserName" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeMD="8">
                                                    <RadzenTextBox Style="width: 100%;" Name="UserName" @bind-Value="userEntity.UserName" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                        </RadzenStack>
                                    </RadzenFieldset>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@ReturnMenu" />
                        </RadzenStack>
                    </RadzenTemplateForm>
                </div>
            </main>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string uuid { get; set; }
    private UserEntity userEntity = new UserEntity();
    private ICollection<RoleEntity> roles;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async void CreateNewUser(UserEntity user)
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string? uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");

        if (user != null && !string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/User/CreateUser", new PayloadGeneric(){
                Uuid = uuidUserLoged!,
                    payload = user
            });
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                UserEntity? createdUser = JsonConvert.DeserializeObject<UserEntity>(content);
                if (createdUser != null)
                {
                    string messageInfo = $"Se agrego la informaci√≥n con exito";                    
                }
            }
            else
            {
                string messageInfo = $"Perdon algo salio mal";
            }
        }
    }

    private void ReturnMenu()
    {
        uuid = "";
        NavigationManager.NavigateTo($"usersgrid", true);
    }

}
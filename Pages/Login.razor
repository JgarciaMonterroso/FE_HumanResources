@page "/login"
@using Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>PRODISA</PageTitle>

<div class="d-flex flex-column flex-root">
    <div class="d-flex flex-column flex-lg-row flex-column-fluid">
        <div class="d-flex flex-column flex-lg-row-fluid w-lg-50 p-10 order-2 order-lg-1">
            <div class="d-flex flex-center flex-column flex-lg-row-fluid">
                <div class="w-lg-500px p-10">
                    <EditForm Model="loginModel" OnValidSubmit="login" class="form w-100" id="kt_sign_in_form">
                        <DataAnnotationsValidator />
                        <div class="text-center mb-11">
                            <a class="mb-0 mb-lg-12">
                                <img alt="Logo" src="img/Logo-512x512.png" class="h-60px h-lg-75px" />
                            </a>
                        </div>
                        <br>
                        <div class="text-center mb-11">
                            <a class="mb-0 mb-lg-12">
                                <img alt="Logo" src="img/Logotipo.png" class="h-60px h-lg-75px" />
                            </a>
                        </div>
                        <div class="fv-row mb-8">
                            <input type="text" placeholder="Correo electrónico" name="email" class="form-control bg-transparent" @bind-value="loginModel.Email" />
                            <ValidationMessage For="(()=> loginModel.Email)"></ValidationMessage>
                        </div>
                        <div class="fv-row mb-3">
                            <input type="password" placeholder="Contraseña" name="password"
                                   class="form-control bg-transparent" @bind-value="loginModel.Password"/>
                        </div>
                        @* <div class="d-flex flex-stack flex-wrap gap-3 fs-base fw-semibold mb-8">
                            <div></div>
                            <a href="" class="link-primary">¿Olvitaste
                                tu contraseña?</a>
                        </div> *@
                        <div class="d-grid mb-10">
                            <button class="btn btn-primary" type="submit">Iniciar sesión</button>
                        </div>
                    </EditForm>
                </div>
            </div>
            <div class="w-lg-500px d-flex flex-center px-10 mx-auto">
                <div class="d-flex fw-semibold text-primary fs-base gap-5">
                    <a href="" target="_blank" style="color: rgb(168, 166, 164);"></a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string messageInfo;
    private async void login()
    {
        try
        {
            if (string.IsNullOrEmpty(loginModel.Email) || string.IsNullOrEmpty(loginModel.Password))
            {
                messageInfo = $"No se admite un campo vacio!";
                toastService.ShowError(messageInfo);
            }
            else
            {
                HttpResponseMessage response = await Http.PostAsJsonAsync("api/login", loginModel);
                if (response.IsSuccessStatusCode)
                {
                    string content = response.Content.ReadAsStringAsync().Result;
                    UserModel? user = JsonConvert.DeserializeObject<UserModel>(content);
                    if (user != null)
                    {
                        if (user.Active)
                        {
                            string? logenUser = await LocalStorage.GetItemAsync<string>("logedUser");
                            if (string.IsNullOrEmpty(logenUser))
                            {
                                await LocalStorage.SetItemAsStringAsync("logedUser", content);
                                await LocalStorage.SetItemAsStringAsync("uuidUser", user.Uuid);
                                //await LocalStorage.SetItemAsStringAsync("jwt", user.JsonWebToken);

                                await AuthStateProvider.GetAuthenticationStateAsync();
                                NavigationManager.NavigateTo("dashboard", true);
                            }
                            else
                            {
                                NavigationManager.NavigateTo("dashboard", true);
                            }
                        }
                        else
                        {
                            messageInfo = $"Usuario inactivo!";
                            toastService.ShowError(messageInfo);
                        }
                    }
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    messageInfo = $"Usted no esta autorizado, Contraseña o Correo erroneo";
                    toastService.ShowError(messageInfo);
                }
                else
                {
                    messageInfo = $"Error al intentar ingresar.";
                    toastService.ShowError(messageInfo);
                }
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }
}
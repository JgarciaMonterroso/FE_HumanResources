@using FE_HumanResources.Models
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject HttpClient Http

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Routing;
@using System;
@using System.Linq;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;

<RadzenPanelMenu>

    <RadzenPanelMenu DisplayStyle="@DisplayStyle" ShowArrow="@isShowArrow" Multiple=false
        @onmouseover="@(args => { if(changeOnOver) { DisplayStyle = MenuItemDisplayStyle.IconAndText; } })"
        @onmouseout="@(args => { if(changeOnOver) { DisplayStyle = MenuItemDisplayStyle.Icon; } })">
        <RadzenPanelMenuItem Text="General" Icon="home">
            <RadzenPanelMenuItem Text="Buttons" Path="buttons" Icon="account_circle"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Menu" Path="menu" Icon="line_weight"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="FileInput" Path="fileinput" Icon="attach_file"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Dialog" Path="dialog" Icon="perm_media"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Notification" Path="notification" Icon="announcement"></RadzenPanelMenuItem>
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem Text="Inputs" Icon="payment">
            <RadzenPanelMenuItem Text="CheckBox" Path="checkbox" Icon="check_circle"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="TextBox" Path="textbox" Icon="input"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="TextArea" Path="textarea" Icon="description"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Password" Path="password" Icon="payment"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Numeric" Path="numeric" Icon="aspect_ratio"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="DatePicker" Path="datepicker" Icon="date_range"></RadzenPanelMenuItem>
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem Text="Data" Icon="save">
            <RadzenPanelMenuItem Text="DataGrid" Path="datagrid" Icon="grid_on"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="DataList" Path="datalist" Icon="list"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="DropDown" Path="dropdown" Icon="dns"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="DropDownDataGrid" Path="dropdown-datagrid" Icon="receipt"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="ListBox" Path="listbox" Icon="view_list"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="TemplateForm" Path="templateform" Icon="line_style"></RadzenPanelMenuItem>
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem Text="Containers" Icon="account_box">
            <RadzenPanelMenuItem Text="Tabs" Path="tabs" Icon="tab"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Panel" Path="panel" Icon="content_paste"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Fieldset" Path="fieldset" Icon="account_balance_wallet"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Card" Path="card" Icon="line_style"></RadzenPanelMenuItem>
        </RadzenPanelMenuItem>
    </RadzenPanelMenu>


</RadzenPanelMenu>

@code {
    private UserModel userModel = null;
    string username = "";

    bool multiple = true;

    MenuItemDisplayStyle DisplayStyle = MenuItemDisplayStyle.IconAndText;

    bool isShowArrow = true;
    bool changeOnOver;

    protected override async Task OnInitializedAsync()
    {

        userModel = null;
        string? usr = await LocalStorage.GetItemAsync<string>("logedUser");

        if (!string.IsNullOrEmpty(usr))
        {
            userModel = JsonConvert.DeserializeObject<UserModel>(usr);
            username = userModel.UserName + " " + userModel.LastName;
        }
        else
        {
            NavigationManager.NavigateTo("login", true);
        }
    }

    private async void logout()
    {
        string? usr = await LocalStorage.GetItemAsync<string>("logedUser");
        if (!string.IsNullOrEmpty(usr))
        {
            userModel = JsonConvert.DeserializeObject<UserModel>(usr);
            if (userModel != null)
            {
                HttpResponseMessage response = await Http.PostAsJsonAsync("api/login/Out", new PayloadGeneric()
                    {
                        Uuid = userModel.Uuid,
                        payload = new { }
                    });

                if (response.IsSuccessStatusCode)
                {
                    await LocalStorage.ClearAsync();
                    NavigationManager.NavigateTo("login", true);

                }
                else
                {
                    toastService.ShowError("No se pude finalizar la sesion!");
                }
            }
        }

    }



}